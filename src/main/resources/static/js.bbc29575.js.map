{"version":3,"sources":["js/grid.js","js/index.js"],"names":["Grid","_classCallCheck","wordSelectMode","selectedItems","firstSelectedItem","gridArea","words","foundWords","_createClass","key","value","firstLetter","currentLetter","cellsInRange","x","y","_ref","i","push","querySelector","concat","delta","gridSize","wordGrid","_this","document","getElementsByClassName","lastChild","removeChild","tbl","createElement","tblBody","index","row","j","cell","letter","cellText","createTextNode","appendChild","setAttribute","addEventListener","event","target","getAttribute","forEach","classList","remove","getCellsInRange","add","selectedWord","reduce","word","reverseSelectedWord","split","reverse","join","indexOf","item","exports","_grid","require","_typeof","obj","Symbol","iterator","constructor","prototype","_regeneratorRuntime","Op","Object","hasOwn","hasOwnProperty","defineProperty","desc","$Symbol","iteratorSymbol","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","enumerable","configurable","writable","err","wrap","innerFn","outerFn","self","tryLocsList","protoGenerator","Generator","generator","create","context","Context","makeInvokeMethod","tryCatch","fn","arg","type","call","ContinueSentinel","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","method","_invoke","AsyncIterator","PromiseImpl","previousPromise","callInvokeWithMethodAndArg","resolve","reject","invoke","record","result","__await","then","unwrapped","error","state","Error","doneResult","delegate","delegateResult","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","done","methodName","undefined","return","TypeError","info","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","length","displayName","isGeneratorFunction","genFun","ctor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","iter","keys","val","object","pop","skipTempReset","prev","charAt","slice","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","catch","_catch","thrown","delegateYield","asyncGeneratorStep","gen","_next","_throw","_asyncToGenerator","args","arguments","apply","submitWordBtn","fetchGridInfo","_x","_x2","_fetchGridInfo","_callee2","commaSeparatedWords","response","_callee2$","_context2","fetch","text","_callee","grid","wordListNode","wordListSection","_callee$","_context","renderGrid"],"mappings":"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","file":"js.bbc29575.js","sourceRoot":"..","sourcesContent":["export class Grid {\r\n\r\n    constructor() {\r\n        this.wordSelectMode = false;\r\n        this.selectedItems = [];\r\n        this.firstSelectedItem;\r\n        this.gridArea = null;\r\n        this.words = [];\r\n        this.foundWords = [];\r\n    }\r\n\r\n    getCellsInRange(firstLetter, currentLetter) {\r\n        let cellsInRange = [];\r\n        if (firstLetter.x > currentLetter.x || firstLetter.y > currentLetter.y) {\r\n            [currentLetter, firstLetter] = [firstLetter, currentLetter];\r\n        }\r\n        if (firstLetter.y === currentLetter.y) {\r\n            for (let i = firstLetter.x; i <= currentLetter.x; i++) {\r\n                cellsInRange.push(this.gridArea.querySelector(`td[data-x=\"${i}\"][data-y=\"${currentLetter.y}\"]`));\r\n            }\r\n        } else if (firstLetter.x === currentLetter.x) {\r\n            for (let i = firstLetter.y; i <= currentLetter.y; i++) {\r\n                cellsInRange.push(this.gridArea.querySelector(`td[data-x=\"${currentLetter.x}\"][data-y=\"${i}\"]`));\r\n            }\r\n        } else if(currentLetter.y - firstLetter.y === currentLetter.x - firstLetter.x) {\r\n            let delta = currentLetter.y - firstLetter.y;\r\n            for (let i = 0; i <= delta; i++) {\r\n                cellsInRange.push(this.gridArea.querySelector(`td[data-x=\"${firstLetter.x + i}\"][data-y=\"${firstLetter.y + i}\"]`));\r\n            }\r\n        }\r\n        return cellsInRange;\r\n    }\r\n\r\n    renderGrid(gridSize, wordGrid) {\r\n\r\n        var gridArea = document.getElementsByClassName(\"grid-area\")[0];\r\n        if (gridArea.lastChild) {\r\n            gridArea.removeChild(gridArea.lastChild);\r\n        }\r\n        this.gridArea = gridArea;\r\n        var tbl = document.createElement(\"table\");\r\n        var tblBody = document.createElement(\"tbody\");\r\n\r\n        let index = 0;\r\n        for (var i = 0; i < gridSize; i++) {\r\n            var row = document.createElement(\"tr\");\r\n\r\n            for (var j = 0; j < gridSize; j++) {\r\n\r\n                var cell = document.createElement(\"td\");\r\n                let letter = wordGrid[index++];\r\n                var cellText = document.createTextNode(letter);\r\n                cell.appendChild(cellText);\r\n                cell.setAttribute(\"data-x\", i);\r\n                cell.setAttribute(\"data-y\", j);\r\n                cell.setAttribute(\"data-letter\", letter)\r\n                row.appendChild(cell);\r\n            }\r\n            tblBody.appendChild(row);\r\n        }\r\n        tbl.appendChild(tblBody);\r\n        gridArea.appendChild(tbl);\r\n\r\n        // Click Handlers\r\n        tbl.addEventListener(\"mousedown\", (event) => {\r\n            this.wordSelectMode = true;\r\n            const cell = event.target;\r\n            let x = +cell.getAttribute(\"data-x\");\r\n            let y = +cell.getAttribute(\"data-y\");\r\n            let letter = cell.getAttribute(\"data-letter\");\r\n            this.firstSelectedItem = {\r\n                x, y\r\n            }\r\n        });\r\n        tbl.addEventListener(\"mousemove\", (event) => {\r\n            if (this.wordSelectMode) {\r\n                const cell = event.target;\r\n                let x = +cell.getAttribute(\"data-x\");\r\n                let y = +cell.getAttribute(\"data-y\");\r\n                let letter = cell.getAttribute(\"data-letter\");\r\n                this.selectedItems.forEach(cell => cell.classList.remove(\"selected\"));\r\n                this.selectedItems = this.getCellsInRange(this.firstSelectedItem, { x, y });\r\n                this.selectedItems.forEach(cell => cell.classList.add(\"selected\"));\r\n\r\n            }\r\n        });\r\n        tbl.addEventListener(\"mouseup\", (event) => {\r\n            this.wordSelectMode = false;\r\n            const selectedWord = this.selectedItems.reduce((word, cell) => word += cell.getAttribute(\"data-letter\"), '');\r\n            const reverseSelectedWord = selectedWord.split(\"\").reverse().join(\"\");\r\n            if(this.words.indexOf(selectedWord) !== -1) { \r\n                this.foundWords.push(selectedWord);\r\n            } else if(this.words.indexOf(reverseSelectedWord) !== -1){\r\n                this.foundWords.push(reverseSelectedWord);\r\n            } else {\r\n                this.selectedItems.forEach(item => item.classList.remove(\"selected\"));\r\n            }\r\n        });\r\n\r\n    }\r\n}","import { Grid } from \"./grid\";\r\nconst submitWordBtn = document.querySelector(\".submit-word\");\r\nsubmitWordBtn.addEventListener(\"click\", async () => {\r\n    const grid = new Grid();\r\n    const commaSeparatedWords = document.querySelector(\"#add-word\").value;\r\n    const gridSize = document.querySelector(\"#grid-size\").value;\r\n    let result = await fetchGridInfo(gridSize, commaSeparatedWords);\r\n    grid.words = commaSeparatedWords.split(\",\");\r\n    grid.renderGrid(gridSize, result);\r\n    let wordListNode = document.createTextNode(grid.words);\r\n    let wordListSection = document.querySelector(\".word-list\");\r\n    if (wordListSection.lastChild) {\r\n        wordListSection.removeChild(wordListSection.lastChild);\r\n    }\r\n    wordListSection.appendChild(wordListNode);\r\n});\r\n\r\nasync function fetchGridInfo(gridSize, commaSeparatedWords) {\r\n    let response = await fetch(`./wordgrid?gridSize=${gridSize}&wordList=${commaSeparatedWords}`);\r\n    let result = await response.text();\r\n    return result.split(\" \");\r\n}\r\n\r\n"]}